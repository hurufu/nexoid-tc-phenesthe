:- consult('Phenesthe/phenesthe').
:- initialization(recognize).

input_phenomenon(exchange(id(_),req(output(language(_),what(_)))), event).
input_phenomenon(exchange(id(_),rsp(_)), event).
input_phenomenon(exchange(id(_),ntf(events(_))), event).

event_phenomenon prv:request(Msg, Id) :=
    exchange(id(Id), req(output(language(_), what(L)))) and
    memberchk(msg(Msg), L).

event_phenomenon prv:ack(Id) :=
    exchange(id(Id), rsp(ack)).

state_phenomenon prv:req_ack(Msg) :=
    prv:request(Msg, Id) ~> prv:ack(Id).

event_phenomenon notification(Msg) :=
    exchange(id(_), ntf(events(L))) and
    memberchk(Msg, L).

event_phenomenon request(Msg) :=
    end(prv:req_ack(Msg)).

% Pass Criteria
state_phenomenon test:dut_asks_to_insert_card_after_swipe :=
    notification(cardSwiped) ~> request(crdhldrEmvInsertCard).
state_phenomenon test:dut_eventually_approves_transaction_using_chip :=
    notification(cardInserted) ~> request(crdhldrEmvApproved).

test_passed :-
    % Whole test case is passed when no failing tests was found
    \+ ((
        % Throw exception if a failing test can be found
        query_single(state_intervals(test:Test,[A,inf])) ->
            throw(error(test_failed(Test,[A,inf]),_))
    )).

recognize :-
    preprocess_phenomena_definitions,
    recognition_query(100, 100, 100),
    test_passed.

query(P) :-
    (
        G = event_instants;
        G = state_intervals;
        G = dynamic_phenomenon_intervals
    ),
    P =.. [G,_,_],
    call(P).

query_single(Q) :-
    query(P),
    P =.. [G,T,L],
    member(X, L),
    Q =.. [G,T,X].

main :-
    findall(P, query(P), L),
    phrase(answer(L), W),
    atom_string(A, W),
    write(A).

answer([]) --> [].
answer([H|T]) --> term(H), ['\n'], answer(T).
term(T) --> { term_string(T, S), string_chars(S, C) }, C.

input_event_instant(Event, Time) :-
    ev(2, Time, Event).

%POI.SF1.TSL.SEP.P.00100
ev(2, 01, exchange(id(1),req(output(language(en),what([msg(crdhldrMsgWelcome)]))))).
ev(2, 02, exchange(id(1),rsp(ack))).
ev(2, 04, exchange(id(101),ntf(events([amountEntry(totalAmount(500))])))).
ev(2, 05, exchange(id(102),ntf(events([cardSwiped])))).
ev(2, 06, exchange(id(2),req(output(language(en),what([msg(crdhldrEmvUseChipReader)]))))).
ev(2, 07, exchange(id(2),rsp(ack))).
ev(2, 08, exchange(id(3),req(output(language(en),what([msg(crdhldrEmvInsertCard)]))))).
ev(2, 09, exchange(id(3),rsp(ack))).
ev(2, 11, exchange(id(103),ntf(events([cardSwiped])))).
ev(2, 12, exchange(id(4),req(output(language(en),what([msg(crdhldrEmvUseChipReader)]))))).
ev(2, 13, exchange(id(4),rsp(ack))).
ev(2, 16, exchange(id(5),req(output(language(en),what([msg(crdhldrEmvInsertCard)]))))).
ev(2, 17, exchange(id(5),rsp(ack))).
ev(2, 20, exchange(id(104),ntf(events([cardInserted])))).
ev(2, 21, exchange(id(6),req(output(language(en),what([msg(crdhldrEmvPleaseWait)]))))).
ev(2, 22, exchange(id(6),rsp(ack))).
ev(2, 23, exchange(id(7),req(output(language(en),what([msg(crdhldrEmvApproved)]))))).
ev(2, 24, exchange(id(7),rsp(ack))).
ev(2, 25, exchange(id(8),req(output(language(en),what([msg(crdhldrMsgWelcome)]))))).
ev(2, 26, exchange(id(8),rsp(ack))).
